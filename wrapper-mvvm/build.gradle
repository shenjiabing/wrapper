apply plugin: 'com.android.library'

android {
    compileSdkVersion ANDROID_COMPILE_SDK_VERSION as int

    defaultConfig {
        minSdkVersion ANDROID_MIN_SDK_VERSION
        targetSdkVersion ANDROID_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    //rx
    api 'io.reactivex.rxjava2:rxjava:2.2.19'
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    //rx lifecycle
//    api 'com.trello.rxlifecycle2:rxlifecycle:2.2.2'
//    api 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'
    //rx binding
    api 'com.jakewharton.rxbinding2:rxbinding:2.2.0'
    //aac
    api 'android.arch.lifecycle:extensions:2.0.0'
    //noinspection LifecycleAnnotationProcessorWithJava8
    api 'android.arch.lifecycle:compiler:2.0.0'

    api 'com.sayweee.libs:logger:0.0.4'
    api 'com.sayweee.libs:scheduler:0.0.3'
//    api 'com.sayweee.libs:wrapper-http:0.0.1-SNAPSHOT'
//    api 'com.sayweee.libs:wrapper-core:0.0.1-SNAPSHOT'

    api project(path: ':wrapper-http')
    api project(path: ':wrapper-core')
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

apply plugin: 'maven'

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}

uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            if(UPLOAD_WRAPPER_MVVM_MAVEN.toBoolean()) {
                snapshotRepository(url: config.MAVEN_REPO_SNAPSHOT_URL) {
                    authentication(userName: config.NEXUS_USERNAME, password: config.NEXUS_PASSWORD)
                }
                repository(url: config.MAVEN_REPO_RELEASE_URL) {
                    authentication(userName: config.NEXUS_USERNAME, password: config.NEXUS_PASSWORD)
                }
                pom.project {
                    version '0.0.1-SNAPSHOT'
                    artifactId 'wrapper-mvvm'
                    groupId GROUP_ID
                    packaging TYPE
                    description DESCRIPTION
                }
            }else{
                repository(url: mavenLocal().getUrl())
                snapshotRepository(url: mavenLocal().getUrl())
                pom.project {
                    version '0.0.1-SNAPSHOT'
                    artifactId 'wrapper-mvvm'
                    groupId GROUP_ID
                    packaging TYPE
                    description DESCRIPTION
                }
            }
        }
    }
}



